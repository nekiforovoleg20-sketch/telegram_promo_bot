import os
import logging
import sys
import sqlite3
import telegram
from datetime import datetime
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ database
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========

def get_db_connection():
    """–°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    db_path = os.path.join(os.path.dirname(__file__), '..', 'database', 'promo_bot.db')
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    return conn

def get_active_promocodes():
    """–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ –±–∞–∑—ã"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM promocodes 
            WHERE is_active = 1 AND (expires_at IS NULL OR expires_at > DATE('now'))
            ORDER BY created_at DESC
        ''')
        promocodes = cursor.fetchall()
        conn.close()
        
        result = []
        for promo in promocodes:
            result.append({
                'id': promo['id'],
                'store': promo['store'],
                'code': promo['code'],
                'description': promo['description'],
                'expires_at': promo['expires_at']
            })
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
        return []

def get_referral_channels():
    """–ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM channels WHERE is_required = TRUE')
        channels = cursor.fetchall()
        conn.close()
        
        result = []
        for channel in channels:
            result.append({
                'id': channel['id'],
                'name': channel['name'],
                'username': channel['username']
            })
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    channels = get_referral_channels()
    channels_text = "\n".join([f"üì¢ {ch['name']} - https://t.me/{ch['username']}" for ch in channels])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–∞–ø–ø—ã
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã", web_app=WebAppInfo(url="https://amazing-druid-78b178.netlify.app/"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n"
        "–Ø - —Ç–≤–æ–π –ü—Ä–∏—è—Ç–µ–ª—å –ü—Ä–æ–º–æ–∫–æ–¥! ü§ñ\n\n"
        "üéÅ <b>–ü–æ–ª—É—á–∏ –ª—É—á—à–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ë–ï–°–ü–õ–ê–¢–ù–û!</b>\n\n"
        "üëá –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!",
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/promo - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
/myid - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID

üéÅ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã:**
1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã¬ª
2. –í—ã–±–∏—Ä–∞–π –ª—é–±—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞
3. –ö–æ–ø–∏—Ä—É–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π!

üì¢ **–ü–æ–¥–¥–µ—Ä–∂–∏ –Ω–∞—Å:** –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –ø–æ —Å—Å—ã–ª–∫–∞–º –∏–∑ /start
    """
    await update.message.reply_text(help_text)

async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /promo - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    promocodes = get_active_promocodes()
    
    if not promocodes:
        await update.message.reply_text("üòî –ü—Ä–æ–º–æ–∫–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ ID
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—Ä–æ–º–æ–∫–æ–¥
    promo_index = user_id % len(promocodes)
    promo = promocodes[promo_index]
    
    await update.message.reply_text(
        f"üéÅ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:**\n\n"
        f"üè™ **–ú–∞–≥–∞–∑–∏–Ω:** {promo['store']}\n"
        f"üîë **–ü—Ä–æ–º–æ–∫–æ–¥:** `{promo['code']}`\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {promo['description']}\n"
        f"üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {promo['expires_at']}\n\n"
        f"‚ú® –ë–æ–ª—å—à–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!"
    )

async def myid_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –¢–≤–æ–π ID: `{user_id}`", parse_mode='MarkdownV2')

# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    admin_text = """
üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/promo_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:
/add_promo - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
/delete_promo - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥  
/list_promos - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:
/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/delete_channel - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    """
    await update.message.reply_text(admin_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    promocodes = get_active_promocodes()
    channels = get_referral_channels()
    
    await update.message.reply_text(
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n"
        f"üéÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(promocodes)}\n"
        f"üì¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
        f"üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n\n"
        f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞–º –∏—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!"
    )

async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /channels - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    channels = get_referral_channels()
    
    if not channels:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ")
        return
    
    text = "üì¢ **–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã:**\n\n"
    for channel in channels:
        text += f"üîπ {channel['name']}\n"
        text += f"üîó https://t.me/{channel['username']}\n\n"
    
    text += "‚ù§Ô∏è –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏ –Ω–∞—Å!"
    
    await update.message.reply_text(text, disable_web_page_preview=True)

async def add_promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if not context.args or len(context.args) < 4:
        await update.message.reply_text(
            "üìù –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/add_promo –º–∞–≥–∞–∑–∏–Ω –∫–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç–∞`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/add_promo Wildberries SUMMER100 \"100 —Ä—É–±–ª–µ–π —Å–∫–∏–¥–∫–∞\" 2025-12-31`\n\n"
            "üìå –û–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã!\n"
            "üìÖ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î"
        )
        return
    
    try:
        store = context.args[0]
        code = context.args[1]
        description_parts = context.args[2:-1]
        description = ' '.join(description_parts)
        expires_at = context.args[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
        try:
            datetime.strptime(expires_at, '%Y-%m-%d')
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î\n"
                "–ü—Ä–∏–º–µ—Ä: 2025-12-31"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO promocodes (store, code, description, expires_at, is_active)
            VALUES (?, ?, ?, ?, 1)
        ''', (store, code, description, expires_at))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {store}\n"
            f"üîë –ö–æ–¥: `{code}`\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at}"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")

async def list_promos_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    promocodes = get_active_promocodes()
    
    if not promocodes:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
        return
    
    text = "üìã **–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:**\n\n"
    for i, promo in enumerate(promocodes, 1):
        text += f"{i}. **{promo['store']}** (ID: {promo['id']})\n"
        text += f"   –ö–æ–¥: `{promo['code']}`\n"
        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {promo['description']}\n"
        text += f"   –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {promo['expires_at']}\n\n"
    
    if len(text) > 4000:
        parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        for part in parts:
            await update.message.reply_text(part, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, parse_mode='Markdown')

async def promo_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM promocodes")
    total = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM promocodes WHERE is_active = 1")
    active = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM promocodes WHERE expires_at < DATE('now')")
    expired = cursor.fetchone()[0]
    
    cursor.execute('SELECT store, COUNT(*) as count FROM promocodes WHERE is_active = 1 GROUP BY store')
    by_store = cursor.fetchall()
    
    conn.close()
    
    text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:**

üéÅ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {total}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}
‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {expired}

üè™ –ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º:
"""
    
    for store in by_store:
        text += f"   ‚Ä¢ {store['store']}: {store['count']}\n"
    
    await update.message.reply_text(text)

async def delete_promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üóë –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/delete_promo ID_–ø—Ä–æ–º–æ–∫–æ–¥–∞`\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –∏—Å–ø–æ–ª—å–∑—É–π /list_promos"
        )
        return
    
    try:
        promo_id = int(context.args[0])
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM promocodes WHERE id = ?", (promo_id,))
        deleted = cursor.rowcount
        conn.commit()
        conn.close()
        
        if deleted > 0:
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ #{promo_id} —É–¥–∞–ª—ë–Ω")
        else:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ #{promo_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

async def add_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/add_channel \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\" username`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/add_channel \"–ú–æ–π –∫–∞–Ω–∞–ª\" mychannel`\n\n"
            "üìå –ù–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã!\n"
            "üîó Username –±–µ–∑ @"
        )
        return
    
    try:
        name = context.args[0].strip('"')
        username = context.args[1].lower().replace('@', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO channels (name, username, is_required)
            VALUES (?, ?, 1)
        ''', (name, username))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üì¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üîó Username: @{username}\n"
            f"üåê –°—Å—ã–ª–∫–∞: https://t.me/{username}"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")

async def delete_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üóë –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/delete_channel ID_–∫–∞–Ω–∞–ª–∞`\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –∏—Å–ø–æ–ª—å–∑—É–π /list_channels"
        )
        return
    
    try:
        channel_id = int(context.args[0])
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM channels WHERE id = ?", (channel_id,))
        deleted = cursor.rowcount
        conn.commit()
        conn.close()
        
        if deleted > 0:
            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª #{channel_id} —É–¥–∞–ª—ë–Ω")
        else:
            await update.message.reply_text(f"‚ùå –ö–∞–Ω–∞–ª #{channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

async def list_channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    channels = get_referral_channels()
    
    if not channels:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ")
        return
    
    text = "üì¢ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n"
    for i, channel in enumerate(channels, 1):
        text += f"{i}. **{channel['name']}** (ID: {channel['id']})\n"
        text += f"   Username: @{channel['username']}\n"
        text += f"   –°—Å—ã–ª–∫–∞: https://t.me/{channel['username']}\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown', disable_web_page_preview=True)

# ========== –ú–ï–ù–Æ –ö–û–ú–ê–ù–î ==========

async def set_bot_commands(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞"""
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    commands = [
        ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        ("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        ("promo", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"),
        ("myid", "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")
    ]
    
    await application.bot.set_my_commands(
        [telegram.BotCommand(command, description) for command, description in commands]
    )

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    promocodes = get_active_promocodes()
    channels = get_referral_channels()
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(promocodes)}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
    print(f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    application.post_init = lambda app: set_bot_commands(app)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("promo", promo_command))
    application.add_handler(CommandHandler("myid", myid_command))
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("channels", channels_command))
    application.add_handler(CommandHandler("add_promo", add_promo_command))
    application.add_handler(CommandHandler("list_promos", list_promos_command))
    application.add_handler(CommandHandler("promo_stats", promo_stats_command))
    application.add_handler(CommandHandler("delete_promo", delete_promo_command))
    application.add_handler(CommandHandler("add_channel", add_channel_command))
    application.add_handler(CommandHandler("delete_channel", delete_channel_command))
    application.add_handler(CommandHandler("list_channels", list_channels_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–π –≤ Telegram")
    print("üì± –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞")
    application.run_polling()

if __name__ == '__main__':
    main()